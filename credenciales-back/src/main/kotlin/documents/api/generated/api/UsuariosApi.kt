/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package documents.api.generated.api

import documents.api.generated.dto.ErrorResponseDto
import documents.api.generated.dto.LoginResponseDto
import documents.api.generated.dto.LoginUserRequestDto
import documents.api.generated.dto.RegisterRequestDto
import documents.api.generated.dto.UserDataResponseDto
import documents.api.generated.dto.UserUpdateRequestDto
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface UsuariosApi {

    @Operation(
        tags = ["Usuarios",],
        summary = "Login",
        operationId = "loginUser",
        description = """Inicia sesión y devuelve un Bearer token.""",
        responses = [
            ApiResponse(responseCode = "200", description = "Inicio de sesión exitoso", content = [Content(schema = Schema(implementation = LoginResponseDto::class))]),
            ApiResponse(responseCode = "401", description = "Credenciales inválidas", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "403", description = "Token expirado o no válido", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "500", description = "Error interno del servidor", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))])
        ],
        security = [ SecurityRequirement(name = "Bearer") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/login"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun loginUser(@Parameter(description = "", required = true) @Valid @RequestBody loginUserRequestDto: LoginUserRequestDto): ResponseEntity<LoginResponseDto>

    @Operation(
        tags = ["Usuarios",],
        summary = "Modificar información del usuario",
        operationId = "modificarDatosUsuario",
        description = """Actualiza los detalles del usuario autenticado.""",
        responses = [
            ApiResponse(responseCode = "200", description = "Información del usuario modificada exitosamente", content = [Content(schema = Schema(implementation = UserDataResponseDto::class))]),
            ApiResponse(responseCode = "400", description = "Datos de modificación inválidos", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "401", description = "Token expirado o no válido", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "404", description = "Usuario no encontrado", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "500", description = "Error interno del servidor", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))])
        ],
        security = [ SecurityRequirement(name = "Bearer") ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/usuario/{usuarioId}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun modificarDatosUsuario(@Parameter(description = "ID del usuario a modificar", required = true) @PathVariable("usuarioId") usuarioId: kotlin.String,@Parameter(description = "", required = true) @Valid @RequestBody userUpdateRequestDto: UserUpdateRequestDto): ResponseEntity<UserDataResponseDto>

    @Operation(
        tags = ["Usuarios",],
        summary = "Obtener información del usuario",
        operationId = "obtenerDatosUsuario",
        description = """Devuelve los detalles del usuario autenticado.""",
        responses = [
            ApiResponse(responseCode = "200", description = "Información del usuario obtenida exitosamente", content = [Content(schema = Schema(implementation = UserDataResponseDto::class))]),
            ApiResponse(responseCode = "401", description = "Token expirado o no válido", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "404", description = "Usuario no encontrado", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "500", description = "Error interno del servidor", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))])
        ],
        security = [ SecurityRequirement(name = "Bearer") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/usuario/{usuarioId}"],
            produces = ["application/json"]
    )
    fun obtenerDatosUsuario(@Parameter(description = "ID del usuario a consultar", required = true) @PathVariable("usuarioId") usuarioId: kotlin.String): ResponseEntity<UserDataResponseDto>

    @Operation(
        tags = ["Usuarios",],
        summary = "Registro de Usuario",
        operationId = "registerUser",
        description = """Registra un nuevo usuario en el sistema.""",
        responses = [
            ApiResponse(responseCode = "201", description = "Usuario registrado exitosamente", content = [Content(schema = Schema(implementation = LoginResponseDto::class))]),
            ApiResponse(responseCode = "400", description = "Datos de registro inválidos", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "409", description = "Usuario ya existe", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))]),
            ApiResponse(responseCode = "500", description = "Error interno del servidor", content = [Content(schema = Schema(implementation = ErrorResponseDto::class))])
        ],
        security = [ SecurityRequirement(name = "Bearer") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/register"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun registerUser(@Parameter(description = "", required = true) @Valid @RequestBody registerRequestDto: RegisterRequestDto): ResponseEntity<LoginResponseDto>
}
